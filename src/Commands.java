import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import net.dv8tion.jda.api.EmbedBuilder;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;

// Classe comandos extende a classe da API JDA "ListenerAdapter"
public class Commands extends ListenerAdapter {

    // Declara√ß√£o de vari√°veis
    // String arrays
    String[] champArray = null;

    // Strings
    String linha; // Armazena uma linha do arquivo campeoes.txt
    String fala; // Armazena apenas a fala da linha do arquivo
    String champ; // Armazena apenas o campe√£o da linha do arquivo

    // Int
    int randomChamp; // Armazena um valor inteiro aleat√≥rio que ser√° utilizado como um index
    int randomFala; // Armazena um valor inteiro aleat√≥rio que ser√° utilizado como um index
    int corPadrao = 0x8963fe;

    // Booleans
    boolean falaAtiva = false; // Define se uma opera√ß√£o j√° est√° sendo realizada pelo bot

    // List<String>
    List<String> lista = new ArrayList<String>(); // Armazena uma lista de string que cont√©m todas as linhas do arquivo campeoes.txt

    // M√©todo inicializador
    public void init(){
        // Criando e instanciando um buffer que far√° uma leitura no arquivo txt
        try (BufferedReader buffer = new BufferedReader(new FileReader("src/res/campeoes.txt"))) {
            // Enquanto a linha que est√° sendo lida n√£o for nula
            while ((linha = buffer.readLine()) != null) { 
                // Adicione a linha a lista de string
                lista.add(linha);
            }
        // Exceptions
        // Arquivo n√£o encontrado
        } catch (FileNotFoundException e) {
            System.out.println("N√£o foi poss√≠vel encontrar o arquivo");
        // Erro de input/output    
        } catch (IOException e) {
            System.out.println("N√£o foi poss√≠vel ler uma linha");
            e.printStackTrace();
        }

        // Instanciando o array com a convers√£o da lista para um array de strings
        champArray = (String[])lista.toArray(new String[lista.size()]);
    }

    // M√©todo para o evento de mensagem recebida no Discord
    public void onMessageReceived(MessageReceivedEvent event){
        init(); // Executa o m√©todo para inicializa√ß√£o da leitura do txt
    
        // Criando e instanciando a vari√°vel que armazenar√° a mensagem do usu√°rio, 
        // formatando e removendo espa√ßos para garantir a leitura correta da mensagem
        String[] msg = event.getMessage().getContentRaw().split("\\s+", 0);

        // Independente da texto ser escrito em caixa alta ou n√£o, 
        // verifica se o que foi digitado √© igual ao prefixo do bot + o nome do comando espec√≠fico do comando
        // COMANDO PARA VER INFORMA√á√ïES SOBRE O BOT
        if (msg[0].equalsIgnoreCase(Main.prefixo + "info")) {

            // Criando e instanciando novo EmbedBuilder
            EmbedBuilder embedInfo = new EmbedBuilder();
            
            // Definindo atributos do embed
            embedInfo.setTitle("üíú League of Falas");
            
            // Conte√∫do do embed
            embedInfo.setDescription("Sou um bot que retorna uma fala de um campe√£o de League of Legends para voc√™ tentar descobrir de quem ela √©. Digite **!cmds** para ver todos os comandos.");
            embedInfo.addField("üïπ Como jogar", "Execute o comando **!falas** para iniciar uma rodada.\n\n" + 
            "Uma frase aparecer√° e voc√™ dever√° descobrir o campe√£o que a disse digitando o nome dele no chat (N√£o precisa de letras mai√∫sculas).\n\n" +
            "**OBS**: Campe√µes de nome composto como \"Lee Sin\" devem ser digitados com um h√≠fen nos espa√ßos. **Ex**: _Lee-Sin_", false);

            // Cor do embed
            embedInfo.setColor(corPadrao);
            embedInfo.setFooter("Developed by Tavinho in Java ‚òï");

            // Exibindo resposta do bot no canal de texto do Discord onde ele foi instanciado inicialmente pelo comando
            event.getChannel().sendMessageEmbeds(embedInfo.build()).queue();

            // Limpando o embed
            embedInfo.clear();
        }

        // COMANDO PARA VER COMANDOS DO BOT
        if (msg[0].equalsIgnoreCase(Main.prefixo + "cmds")) {

            // Criando e instanciando novo EmbedBuilder
            EmbedBuilder embedInfo = new EmbedBuilder();
            
            // Definindo atributos do embed
            embedInfo.setTitle("üíú League of Falas - Comandos");
            
            // Conte√∫do do embed
            embedInfo.setDescription("Prefixo utlizado -> **!**\n\n"
            + "**Comandos**\n" 
            + "    ‚óè info - Informa√ß√µes gerais.\n"
            + "    ‚óè cmds - Exibe todos os comandos.\n"
            + "    ‚óè rep - Exibe o link do reposit√≥rio do bot no GitHub.\n"
            + "    ‚óè falas - Retorna uma fala para voc√™ descobrir quem a disse.\n" 
            + "    ‚óè falas.off - Desativa a atividade de falas.\n");

            // Cor do embed
            embedInfo.setColor(corPadrao);

            // Exibindo resposta do bot no canal de texto do Discord onde ele foi instanciado inicialmente pelo comando
            event.getChannel().sendMessageEmbeds(embedInfo.build()).queue();

            // Limpando o embed
            embedInfo.clear();
        }

        // COMANDO PARA VER COMANDOS DO BOT
        if (msg[0].equalsIgnoreCase(Main.prefixo + "rep")){
            event.getChannel().sendMessage("https://github.com/tavinhossaur/league_of_falas_discord_bot").queue();
        }

        // COMANDO PARA DESATIVAR A ATIVIDADE FALAS
        if (msg[0].equalsIgnoreCase(Main.prefixo + "falas.off") && falaAtiva) {
            // Define como desativado o comando
            falaAtiva = false;
            // E mostra um retorno no chat avisando a altera√ß√£o
            event.getChannel().sendMessage("**Atividade de falas dos campe√µes desativada**").queue();
        }
        
        // Caso o usu√°rio digite novamente o comando para criar uma nova fala com uma j√° ativa
        if (msg[0].equalsIgnoreCase(Main.prefixo + "falas") && falaAtiva) {
            // Exibe uma mensagem para guiar o usu√°rio na desativa√ß√£o da fala anterior. 
            event.getChannel().sendMessage("**J√° h√° uma fala para voc√™ descobrir " + event.getAuthor().getAsMention() + "!**\n\n" +
            "Se deseja trocar a fala para tentar outra, utilize o comando: **!falas.off**").queue();
        }
        // Independente da texto ser escrito em caixa alta ou n√£o, 
        // verifica se o que foi digitado √© igual ao prefixo do bot + o nome do comando espec√≠fico do comando
        // COMANDO PARA ATIVAR A ATIVIDADE FALAS
        else if(msg[0].equalsIgnoreCase(Main.prefixo + "falas")) {
            // Se o comando n√£o est√° ativo
            if (!falaAtiva){
                // Instancia um novo n√∫mero inteiro aleat√≥rio para o index
                randomChamp = new Random().nextInt(champArray.length);
                // Instancia um novo n√∫mero inteiro aleat√≥rio para definir qual das duas frases ser√° selecionada (cara ou coroa)
                randomFala = new Random().nextInt(99);
                
                // Instanciando a fala
                // Se o valor gerado for menor que 50, ent√£o escolhe a primeira frase 
                if (randomFala < 50) {
                    fala = champArray[randomChamp].split("_")[1];
                // Caso contr√°rio, escolhe a segunda    
                }else{
                    fala = champArray[randomChamp].split("_")[2];
                }
                
                // Instanciando o campe√£o
                champ = champArray[randomChamp].split("_")[0];

                // Printa no console o campe√£o e a fala que foram retornados pelo index aleat√≥rio
                System.out.println("Campe√£o: " + champ);
                System.out.println("Fala: " + fala);
                System.out.println();
            }     

            // Criando e instanciando novo EmbedBuilder
            EmbedBuilder embedfala = new EmbedBuilder();
            
            // Definindo atributos do embed
            embedfala.setTitle("Que campe√£o fala isso? ü§î");
            embedfala.setDescription("_\"" + fala + "\"_");
            embedfala.setColor(corPadrao);

            // Caso o usu√°rio possua um apelido no servidor, o bot se referir√° ao usu√°rio por ele
            if (event.getMember().getNickname() != null) {
                embedfala.setFooter("Instanciado por " + event.getMember().getNickname(), event.getMember().getUser().getAvatarUrl());
            // Caso contr√°rio, √© utilizado o nome de usu√°rio do Discord.    
            }else{
                embedfala.setFooter("Instanciado por " + event.getMember().getUser().getName(), event.getMember().getUser().getAvatarUrl());
            }    

            // Exibindo resposta do bot no canal de texto do Discord onde ele foi instanciado inicialmente pelo comando
            event.getChannel().sendMessageEmbeds(embedfala.build()).queue();

            // Limpando o embed
            embedfala.clear();

            // Define como ativo o comando
            falaAtiva = true;
        }
        
        //  Se o usu√°rio digitar corretamente o campe√£o da fala, esse comando estiver ativo e n√£o seja um bot que enviou a ultima mensagem
        if (msg[0].equalsIgnoreCase(champ) && falaAtiva && !event.getMessage().getAuthor().isBot()) {
            // Exibe a confirma√ß√£o de resposta correta no canal de texto do Discord onde ele foi instanciado inicialmente pelo comando
            event.getChannel().sendMessage("Parab√©ns " + event.getAuthor().getAsMention() + "! Voc√™ acertou!\nCampe√£o: " + "**" + champ + "**").queue();
            
            // Define como desativado o comando
            falaAtiva = false;
        }
    }
}
